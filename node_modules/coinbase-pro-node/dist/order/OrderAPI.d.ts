import { AxiosInstance } from 'axios';
import { OrderSide } from '../payload/common';
export declare enum OrderType {
    LIMIT = "limit",
    MARKET = "market"
}
export declare enum TimeInForce {
    FILL_OR_KILL = "FOK",
    GOOD_TILL_CANCELED = "GTC",
    GOOD_TILL_TIME = "GTT",
    IMMEDIATE_OR_CANCEL = "IOC"
}
export declare enum SelfTradePrevention {
    CANCEL_BOTH = "cb",
    CANCEL_NEWEST = "cn",
    CANCEL_OLDEST = "co",
    DECREMENT_AND_CANCEL = "dc"
}
export interface NewOrder {
    client_oid?: string;
    funds?: string;
    product_id: string;
    side: OrderSide;
    size?: string;
    stop?: 'loss' | 'entry';
    stop_price?: string;
    stp?: SelfTradePrevention;
    type: OrderType;
}
export declare enum OrderStatus {
    ACTIVE = "active",
    OPEN = "open",
    PENDING = "pending"
}
export interface Order {
    created_at: string;
    executed_value: string;
    fill_fees: string;
    filled_size: string;
    id: string;
    post_only: false;
    price: string;
    product_id: string;
    settled: boolean;
    side: OrderSide;
    size: string;
    status: OrderStatus;
    stp: SelfTradePrevention;
    time_in_force: TimeInForce;
    type: OrderType;
}
export declare class OrderAPI {
    private readonly apiClient;
    static readonly URL: {
        ORDERS: string;
    };
    constructor(apiClient: AxiosInstance);
    cancelOpenOrders(productId?: string): Promise<string[]>;
    getOpenOrders(): Promise<Order[]>;
    getOrder(orderId: string): Promise<Order | null>;
    placeOrder(newOrder: NewOrder): Promise<Order>;
}
