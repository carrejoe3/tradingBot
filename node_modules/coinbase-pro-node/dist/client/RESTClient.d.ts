/// <reference types="node" />
import { AxiosInterceptorManager, AxiosRequestConfig, AxiosResponse } from 'axios';
import { AccountAPI } from '../account/AccountAPI';
import { ClientAuthentication } from '../CoinbasePro';
import { OrderAPI } from '../order/OrderAPI';
import { Candle, CandleGranularity, ProductAPI, ProductEvent } from '../product/ProductAPI';
import { UserAPI } from '../user/UserAPI';
import { FeeAPI } from '../fee/FeeAPI';
import { FillAPI } from '../fill/FillAPI';
import { ProfileAPI } from '../profile/ProfileAPI';
import { EventEmitter } from 'events';
export interface RESTClient {
    on(event: ProductEvent.NEW_CANDLE, listener: (productId: string, granularity: CandleGranularity, candle: Candle) => void): this;
}
export declare class RESTClient extends EventEmitter {
    get defaults(): AxiosRequestConfig;
    get interceptors(): {
        request: AxiosInterceptorManager<AxiosRequestConfig>;
        response: AxiosInterceptorManager<AxiosResponse>;
    };
    readonly account: AccountAPI;
    readonly fee: FeeAPI;
    readonly fill: FillAPI;
    readonly order: OrderAPI;
    readonly product: ProductAPI;
    readonly profile: ProfileAPI;
    readonly user: UserAPI;
    private readonly httpClient;
    private readonly logger;
    constructor(baseURL: string, auth: ClientAuthentication);
    static stringifyPayload(config: AxiosRequestConfig): string;
}
